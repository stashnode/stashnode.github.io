<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://stashnode.github.io/news/article-26175.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>python数据可视化-matplotlib入门利用随机函数生成变化图形2</title>
        <meta name="description" content="&nbsp;鉴于上一篇中最后三个问题： 1、上述程序是否能进行优化（比如功能相同的） 2、创建三个3个实例，用了3个语句，能否建一个函数，只输入一个数n，就自动创建n个实例？同时，每个实例的num_t" />
        <link rel="icon" href="/assets/website/img/stashnode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/stashnode/aos/aos.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/stashnode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/stashnode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/stashnode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/stashnode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/stashnode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/stashnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-L8JHXE0T2M"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-L8JHXE0T2M');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="d-flex align-items-center">
        <div class="container d-flex justify-content-between">
            <div id="logo">
                                <a href="/"><span>Stash Node</span></a>
                            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>python数据可视化-matplotlib入门利用随机函数生成变化图形2</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= About Section ======= -->
        <section id="about">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<p>&nbsp;鉴于上一篇中最后三个问题：</p> <p>1、上述程序是否能进行优化（比如功能相同的）</p> <p>2、创建三个3个实例，用了3个语句，能否建一个函数，只输入一个数n，就自动创建n个实例？同时，每个实例的num_times随机，(n比较大时，num_times应该比较小)</p> <p>3、当实现上述功能后，程序运行，只输入一个参数（创建实例的个数），就会自动生成对应的num_times，并分别调用相关函数生成对应图表。</p> <p>可以，在类Rand_moving()中计算每一步的方向和移动位置时，都用到了一个乘法公式，</p> <div class="cnblogs_code"> <pre>            x_direction = choice([1,-1])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">x的移动方向，1向上，0不变，-1向下</span>             x_distance = choice([0,1,2,3,4,5])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">x的每次移动的像素，</span>             x_step = x_direction*x_distance<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">移动方向乘以移动距离，以确定沿x移动的距离</span><span style="color: rgba(0, 0, 0, 1)">                         y_direction</span>=  choice([1,-1])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">y的移动方向，1向上，0不变，-1向下</span>             y_distance = choice([0,1,2,3,4,5])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">y的每次移动的像素，</span>             y_step = y_direction*y_distance<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">移动方向乘以移动距离，以确定沿y移动的距离</span></pre> </div> <p>因此可以整理出一个计算方法，可以直接调用，至于2，3很明显，也是可以完成的。</p> <p>第一步，将乘法公式提出来单独形成一个作用于自身的方法，代码如下：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_step(self,direction,distance):</span><span style="color: rgba(0, 0, 255, 1)">return</span> distance*<span style="color: rgba(0, 0, 0, 1)">direction</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> fill_moving(self):</span><span style="color: rgba(0, 0, 255, 1)">while</span> len(self.x_values)&lt;self.num_times:<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">循环不断运行，直到漫步包含所需数量的点num_times</span>             x_step = self.get_step(choice([1,-1]),choice([0,1,2,3,4,5]))<span style="color: rgba(0, 128, 0, 1)">#直接调用get_step方法，使代码更加简洁</span>             y_step = self.get_step(choice([1,-1]),choice([0,1,2,3,4,5]))</pre> </div> <p>完成第1问，代码变得更加简洁明了。</p> <p>第2、3个问题：</p> <p>1）要能生成实例个数n，且还有对应的移动次数num_times，可考虑用字典，即实例个数为key，对应移动次数num_times为键值,当输入2时，如&nbsp; caselist={’1‘:'150000'，’2‘:'250000'}</p> <p>2）读取字典每个项目，将对应的key和value传递给由Rand_moving类创建的实例，key的个数即为需要创建实例的个数，对应的value值为移动次数。</p> <p>3）输入数字，即为字典key的个数，存入字典，同时利用随机函数生成一个num_times保存到对应的value中。</p> <p>&nbsp;完成思路：</p> <p>1，重新定义一个类 New_case() 作用：接收一个数据，并根据这个数据自动生成一个字典，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> New_case():</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义New_case类</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(128, 0, 128, 1)">__init__</span>(self,numbers):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义要创建的实例个数</span>         self.numbers=<span style="color: rgba(0, 0, 0, 1)">numbers              self.caselist</span>={}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义一个空的caselist字典</span>         self.case =<span style="color: rgba(0, 0, 0, 1)"> 0</span><span style="color: rgba(0, 0, 255, 1)">while</span> self.case &lt;<span style="color: rgba(0, 0, 0, 1)"> self.numbers:<span style="color: rgba(0, 128, 0, 1)">#当变量case小于给定值时</span>，             self.case</span>+= 1<span style="color: rgba(0, 0, 0, 1)">             times</span>= choice([100000,150000,200000,250000<span style="color: rgba(0, 0, 0, 1)">])<span style="color: rgba(0, 128, 0, 1)">#随机选择一个移动次数</span>             self.caselist[self.case]</span>= times<span style="color: rgba(0, 128, 0, 1)">#将value与key对应</span></pre> </div> <p>2、需要循环读取字典的key和value,并将value传递给类Rand_moving，随后再运行fill_moving()生成数据并保存到列表，随即用plt.scatter()进行绘图</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">for</span> key,value<span style="color: rgba(0, 0, 255, 1)">in</span> self.caselist.items():<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">字典不为空</span>             colorkey=str(key)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">  将字典关键字转为字符串存到变量colorkey中</span>             examplecase = Rand_moving(int(value))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建实例，将对应的value值传递类Rand_moving</span>             examplecase.fill_moving()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">调用类Rand_moving中的方法fill_moving()计算移动相关数据并保存到列表中</span>             plt.figure(dpi=128,figsize=(12, 10))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建画面屏幕</span><span style="color: rgba(0, 0, 0, 1)">                       plt.scatter(examplecase.x_values,examplecase.y_values,c</span>=self.colors[colorkey],s=15<span style="color: rgba(0, 0, 0, 1)">)         plt.show()</span></pre> </div> <pre><span><br/>上篇中的代码  c=y_values, cmap=plt.cm.Reds为什么这里不再用，是因为这里循环的时候一直出现红色R</span>eds，为了对比，创建了一新字典colors{}，将生成的个数与颜色相对应。所以上述代码中修改为 c=self.colors[colorkey]<br/><br/>类New_case()&nbsp;全部代码如下：<br/><br/></pre> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt</span><span style="color: rgba(0, 0, 255, 1)">from</span> rand_moving<span style="color: rgba(0, 0, 255, 1)">import</span> *<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> New_case():</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义New_case类</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(128, 0, 128, 1)">__init__</span>(self,numbers):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义要创建的实例个数</span>         self.numbers=<span style="color: rgba(0, 0, 0, 1)">numbers              self.caselist</span>={}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义一个空的cases列表</span>         self.case = 0<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义一个case变量</span>         self.colors={<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">2</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">orange</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">3</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">4</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">green</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">5</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">blue</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">6</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">puple</span><span style="color: rgba(128, 0, 0, 1)">'</span>}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建了一新字典colors{}，将生成的个数与颜色相对应</span><span style="color: rgba(0, 0, 255, 1)">while</span> self.case &lt; self.numbers:<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">小于给定实例个数时</span>             self.case += 1<span style="color: rgba(0, 0, 0, 1)">             times</span>= choice([100000,150000,200000,250000])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">随机生成一个移动次数</span>             self.caselist[self.case] = times<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将变量case作为key, times作为value保存到字典中</span><span style="color: rgba(0, 0, 255, 1)">def</span> case_moving(self):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">重新定义一个方法，即访问字典所有项</span><span style="color: rgba(0, 0, 255, 1)">for</span> key,value<span style="color: rgba(0, 0, 255, 1)">in</span> self.caselist.items():<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">字典不为空</span>             colorkey=str(key)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">  将字典关键字转为字符串存到变量colorkey中</span>             examplecase = Rand_moving(int(value))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建实例，将对应的value值传递类Rand_moving</span>             examplecase.fill_moving()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">调用类Rand_moving中的方法fill_moving()计算移动相关数据并保存到列表中</span>             plt.figure(dpi=128,figsize=(12, 10))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建画面屏幕</span>             plt.scatter(examplecase.x_values,examplecase.y_values,c=self.colors[colorkey],s=15)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">注意调用了上述新字典的颜色</span>         plt.show()</pre> </div> <p>3、主程序</p> <p>主程序中有一个交互，需要输入一个数据，然后调用相关相关类创建实例（<span style="color: rgba(255, 0, 0, 1)">慢慢成调包侠了！^v^</span>）</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt</span><span style="color: rgba(0, 0, 255, 1)">from</span> rand_moving<span style="color: rgba(0, 0, 255, 1)">import</span> *<span style="color: rgba(0, 0, 255, 1)">from</span> new_case<span style="color: rgba(0, 0, 255, 1)">import</span> *<span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Please enter the number：</span><span style="color: rgba(128, 0, 0, 1)">"</span>)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">交互，请输入一个数，模拟运行，不需要太大的数据。</span> n = input()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将输入的数据保存到变量n中，注意所有输入均为字符串，</span><span style="color: rgba(0, 0, 0, 1)"> testcase</span>= New_case(int(n))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将n转为整型数据，创建实例个数</span> testcase.case_moving()</pre> </div> <p>实际运行效果，输入4，生成4个数据图形（为展示较全，原图已缩小）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6fcf53caf5d11797712f31895d54022a.jpg" alt="python数据可视化-matplotlib入门利用随机函数生成变化图形2"></p> <p>self.colors={'1':'red','2':'orange','3':'yellow','4':'green','5':'blue','6':'puple'}<span style="color: rgba(255, 0, 0, 1)">注意：图的颜色分别与colors字典中对应。</span></p> <p>当然如果觉得数轴很碍眼，那就在类类New_case()&nbsp;中的plt.figure()之后加上</p> <p>plt.axes().get_xaxis().set_visible(False)<br />plt.axes().get_yaxis().set_visible(False)<span></span></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-26173.htm">springboot项目 Feign调用时，@RequestBody 接受字符串(String),json字符串多出引号</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-6-node-share.htm" title="「11月6日」最高速度22.2M/S，2024年Clash/V2ray/Shadowrocket/SSR每天更新免费节点订阅链接">「11月6日」最高速度22.2M/S，2024年Clash/V2ray/Shadowrocket/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-1-free-ssr-node.htm" title="「12月1日」最高速度19.4M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接">「12月1日」最高速度19.4M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-18-free-ssr-subscribe.htm" title="「10月18日」最高速度18.7M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接">「10月18日」最高速度18.7M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-20-free-shadowrocket-node.htm" title="「8月20日」最高速度18.7M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅链接">「8月20日」最高速度18.7M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-17-clash-v2ray-ss-ssr.htm" title="「9月17日」最高速度19.5M/S，2024年SSR/Shadowrocket/Clash/V2ray每天更新免费节点订阅链接">「9月17日」最高速度19.5M/S，2024年SSR/Shadowrocket/Clash/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-7-free-ssr-node.htm" title="「10月7日」最高速度20.5M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费节点订阅链接">「10月7日」最高速度20.5M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-17-free-node-subscribe-links.htm" title="「11月17日」最高速度22.1M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费节点订阅链接">「11月17日」最高速度22.1M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-2-free-node-subscribe-links.htm" title="「10月2日」最高速度22.5M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接">「10月2日」最高速度22.5M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-26-node-share-links.htm" title="「9月26日」最高速度21.3M/S，2024年Clash/V2ray/SSR/Shadowrocket每天更新免费节点订阅链接">「9月26日」最高速度21.3M/S，2024年Clash/V2ray/SSR/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-free-ssr-node.htm" title="「11月14日」最高速度18.3M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「11月14日」最高速度18.3M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                StashNode免费订阅官网 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/stashnode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/stashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/stashnode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/stashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>