<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://stashnode.github.io/news/article-63391.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>C#语法糖系列聊聊 ref，in 修饰符底层玩法</title>
        <meta name="description" content="自从 C# 7.3 放开 ref 之后，这玩法就太花哨了，也让 C# 这门语言变得越来越多范式，越来越重，这篇我们就来聊聊 ref，本质上来说 ref 的放开就是把 C/C++ 指针的那一套又拿回来了" />
        <link rel="icon" href="/assets/website/img/stashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="StashNode免费订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stashnode.github.io/news/article-63391.htm" />
    <meta property="og:site_name" content="StashNode免费订阅官网" />
    <meta property="og:title" content="C#语法糖系列聊聊 ref，in 修饰符底层玩法" />
    <meta property="og:image" content="https://stashnode.github.io/uploads/20240808-1/dc5bd30a81fcab1ed84497fc8c445ba8.webp" />
        <meta property="og:release_date" content="2025-02-26T08:34:54" />
    <meta property="og:updated_time" content="2025-02-26T08:34:54" />
        <meta property="og:description" content="自从 C# 7.3 放开 ref 之后，这玩法就太花哨了，也让 C# 这门语言变得越来越多范式，越来越重，这篇我们就来聊聊 ref，本质上来说 ref 的放开就是把 C/C++ 指针的那一套又拿回来了" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C#语法糖系列聊聊 ref，in 修饰符底层玩法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/stashnode/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/stashnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-L8JHXE0T2M"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-L8JHXE0T2M');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="d-flex align-items-center">
        <div class="container d-flex justify-content-between">
            <div id="logo">
                <a href="/">
                                <span>Stash Node</span>
                                </a>
            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>C#语法糖系列聊聊 ref，in 修饰符底层玩法</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= About Section ======= -->
        <section id="about">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>自从 C# 7.3 放开 ref 之后，这玩法就太花哨了，也让 C# 这门语言变得越来越多范式，越来越重，这篇我们就来聊聊 ref，本质上来说 ref 的放开就是把 C/C++ 指针的那一套又拿回来了，而且还封装成一套自己的玩法，下面一一解读下。</p> <h2 id="一方法参数上的-ref">一：方法参数上的 ref</h2> <p>我想设计者的初心把 ref 的功能限制的死死的，可能也考虑到 C# 是一门面向业务开发的语言，讲究的是做项目快狠准，性能反而不是第一要素，这个时候的 ref 很简单，看一下代码：</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             long price = 0;              GetPrice(ref price);              Console.WriteLine($"output: price={price}");         }          public static void GetPrice(ref long price)         {             price = 10;         }     }  output: price=10</code></pre> <p>我相信很有朋友都知道，方法参数中的<code>ref long price</code>  拿的是栈地址，对栈地址上的值进行修改，自然就修改了指向这些地址上的变量，和引用类型原理一致，接下来我们从汇编角度去验证，在 Price 方法上下一个断点。</p> <pre><code class="language-C#"> D:\net5\ConsoleApp4\ConsoleApp3\Program.cs @ 16: 026b048e 8d4dec          lea     ecx,[ebp-14h] 026b0491 ff15a0ebc800    call    dword ptr ds:[0C8EBA0h] (ConsoleApp3.Program.GetPrice(Int64 ByRef), mdToken: 06000002) 026b0497 90              nop 0:000&gt; bp 026b0491 0:000&gt; g Breakpoint 1 hit ChangeEngineState eax=00000000 ebx=0057f354 ecx=0057f2d4 edx=783aaa50 esi=02979e7c edi=0057f2dc eip=026b0491 esp=0057f2c4 ebp=0057f2e8 iopl=0         nv up ei pl zr na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246 026b0491 ff15a0ebc800    call    dword ptr ds:[0C8EBA0h] ds:002b:00c8eba0=00c2be10</code></pre> <p>从汇编的<code>lea     ecx,[ebp-14h]</code> 就能看到，将<code>ebp-14</code> 这个单元的内存地址给了 ecx，这个 ecx 也就是作为参数传递给了<code>Price</code> 方法，后续的赋值将会影响这个<code>栈位置</code> 上的内容。</p> <h2 id="2-方法返回值上的-ref">2. 方法返回值上的 ref</h2> <p>这就有意思了，进入的时候传地址，回来的时候也想传地址，很显然<code>方法线程栈</code>上的<code>值类型</code> 是传不出去的，毕竟方法返回后，esp,ebp 所控制的方法栈帧空间是要销毁的，所以只能是堆上对象才能实现。</p> <p>为了方便理解，看如下代码：</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             ref long price = ref GetCurrentPrice();              price = 12;              Console.WriteLine($"output: price={price}");         }          public static ref long GetCurrentPrice()         {             long[] nums = { 10, 20, 30 };              return ref nums[1];         }     }  output: price=12</code></pre> <p>可以看到当前的<code>price=12</code>,同时<code>nums</code> 这个数组也被修改了，可以用 windbg 验证一下。</p> <pre><code class="language-C#"> 0:000&gt; !dumpheap  -type System.Int64[]   Address       MT     Size 027ca7b0 04c39d00       36       Statistics:       MT    Count    TotalSize Class Name 04c39d00        1           36 System.Int64[] Total 1 objects 0:000&gt; dq 027ca7b0 L4 027ca7b0  00000003`04c39d00 00000000`0000000a 027ca7c0  00000000`0000000c 00000000`0000001e</code></pre> <p>可以看到上面的<code>000000000000000c</code> 被修改成<code>price=12</code> ，这时候有人就不爽了，我不希望外面的代码能修改 price 内容，那怎么办呢？ 还得在<code>ref</code> 后面加上<code>readonly</code> ，改造后如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f4279856e14181131760eb07d993b271.jpg" alt="C#语法糖系列聊聊 ref，in 修饰符底层玩法"></p> <p>到此时写法就有点疯狂了，对 C# 开发者来说很难理解，对熟悉 C/C++ 指针的朋友来说又很不习惯，太纠结了，下面是一段翻译过来的<code>C/C++指针代码</code> 。</p> <pre><code class="language-C++"> const long long* getcurrentprice();  int main() { 	int i = 0;  	const long long* price = getcurrentprice();  	price = 12;  	printf("num=%d, price=%d \n", i, *price);  }  const long long* getcurrentprice() {  	long long* num = new long long[3]{ 10,20,30 }; 	return num + 1; }</code></pre> <p>说实话，这代码看起来就清爽多了。</p> <h2 id="2-对-ref-变量的-in-操作">2. 对 ref 变量的 in 操作</h2> <p>这又是一套 C/C++ 的玩法，有时候不希望某一个方法对 ref 变量进行修改，注意：是不希望某一个方法进行修改，其他方法是可以的，那这个怎么实现呢？这就需要在入参上加<code>in</code> 前缀，把代码修改一下。</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             ref long price = ref GetCurrentPrice();              ModifyPrice(in price);              Console.WriteLine($"output: price={price}");         }          public static ref long GetCurrentPrice()         {             long[] nums = { 10, 20, 30 };              return ref nums[1];         }          public static void ModifyPrice(in long price)         {             price = 12;             Console.WriteLine(price);         }     }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6e89468a5e3d2f0e468724a0ac70f229.jpg" alt="C#语法糖系列聊聊 ref，in 修饰符底层玩法"></p> <p>可以看到，这时候报错了，如果换成 C++ 就很简单了，只需要在参数上把 in 改成 const 即可。</p> <pre><code class="language-C++"> void modifyprice(const long long* price) { 	*price = 12; 	printf("%d", *price); }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/40e79010e54d638a0441264722297bf2.jpg" alt="C#语法糖系列聊聊 ref，in 修饰符底层玩法"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-62805.htm">上海各区正规宠物医院地址（上海有名宠物医院）</a></p>
                                        <p>下一个：<a href="/news/article-63392.htm">动物疫苗使用前的注意事项有哪些（动物疫苗注射工作注意事项）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-45505.htm" title="Vue项目中 端口号、项目自动运行和`eslint`关闭 配置">Vue项目中 端口号、项目自动运行和`eslint`关闭 配置</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-free-node-subscribe-links.htm" title="「11月30日」最高速度22.8M/S，2024年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接">「11月30日」最高速度22.8M/S，2024年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-28-clash-v2ray-ss-ssr.htm" title="「12月28日」最高速度20.4M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅地址分享">「12月28日」最高速度20.4M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-18-free-shadowrocket-node.htm" title="「2月18日」最高速度22.4M/S，2025年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅地址分享">「2月18日」最高速度22.4M/S，2025年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-54225.htm" title="宠物领养协议模板下载 宠物领养协议模板下载电子版">宠物领养协议模板下载 宠物领养协议模板下载电子版</a></li>
                        <li class="py-2"><a href="/news/article-58755.htm" title="宠物用品批发网站大全最便宜卖（宠物用品十大批发市场）">宠物用品批发网站大全最便宜卖（宠物用品十大批发市场）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-19-free-node-subscribe-links.htm" title="「11月19日」最高速度22.1M/S，2024年SSR/Shadowrocket/Clash/V2ray每天更新免费节点订阅链接">「11月19日」最高速度22.1M/S，2024年SSR/Shadowrocket/Clash/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-24-free-shadowrocket-node.htm" title="「2月24日」最高速度18.6M/S，2025年SSR/Shadowrocket/V2ray/Clash每天更新免费节点订阅地址分享">「2月24日」最高速度18.6M/S，2025年SSR/Shadowrocket/V2ray/Clash每天更新免费节点订阅地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-13-free-node-subscribe-links.htm" title="「2月13日」最高速度22.2M/S，2025年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅地址分享">「2月13日」最高速度22.2M/S，2025年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-50511.htm" title="动物疫苗可以和食物一起放冰箱吗多久打一次（动物疫苗需要冷藏吗）">动物疫苗可以和食物一起放冰箱吗多久打一次（动物疫苗需要冷藏吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                StashNode免费订阅官网 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/stashnode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/stashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/stashnode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/stashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>