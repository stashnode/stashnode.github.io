<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://stashnode.github.io/news/article-55322.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Hyperledger Fabric的test-network启动过程Bash源码详解</title>
        <meta name="description" content="前言 在基于Debian搭建Hyperledger Fabric 2.4开发环境及运行简单案例中，我们已经完成了Fabric 2.4的环境搭建及fabric-samples/test-network官" />
        <link rel="icon" href="/assets/website/img/stashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="StashNode免费订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stashnode.github.io/news/article-55322.htm" />
    <meta property="og:site_name" content="StashNode免费订阅官网" />
    <meta property="og:title" content="Hyperledger Fabric的test-network启动过程Bash源码详解" />
    <meta property="og:image" content="https://stashnode.github.io/uploads/20240808-1/3932e95acc3f090a499b785bf7da0601.webp" />
        <meta property="og:release_date" content="2025-02-12T09:08:00" />
    <meta property="og:updated_time" content="2025-02-12T09:08:00" />
        <meta property="og:description" content="前言 在基于Debian搭建Hyperledger Fabric 2.4开发环境及运行简单案例中，我们已经完成了Fabric 2.4的环境搭建及fabric-samples/test-network官" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Hyperledger Fabric的test-network启动过程Bash源码详解">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/stashnode/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashnode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/stashnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-L8JHXE0T2M"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-L8JHXE0T2M');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="d-flex align-items-center">
        <div class="container d-flex justify-content-between">
            <div id="logo">
                <a href="/">
                                <span>Stash Node</span>
                                </a>
            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>Hyperledger Fabric的test-network启动过程Bash源码详解</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= About Section ======= -->
        <section id="about">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="前言">前言</h2> <p>在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2021/07/21/setup_hyperledger_fabric_environment_and_test_demo/"  target="_blank" rel="nofollow">基于Debian搭建Hyperledger Fabric 2.4开发环境及运行简单案例</a>中，我们已经完成了Fabric 2.4的环境搭建及<code>fabric-samples/test-network</code>官方案例的运行。毫无疑问<code>test-network</code>是一个优秀的入门项目，让我们仅仅通过几行命令就能搭建起常用的Fabric联盟链网络，但我相信很多人第一次使用<code>./network.sh up</code>成功启动联盟链网络时跟我一样是懵的：网络是怎样启动的？它在背后做了什么？该网络包含哪些节点？包含哪些功能？它有什么用？为了解决这些问题，本文根据<code>test-network</code>中的几个<code>Bash</code>脚本源码，从启动流程、创建通道、部署链码等多个入口函数着手详细分析了脚本执行过程，对未来定制自己的Fabric网络提供参考。本文分析源码主要包含启动默认网络、启动CA网络、创建通道、部署链码四个方面，每节分为官方调用和过程详解：官方调用是使用官方Bash脚本实现对应功能、过程详解是该脚本的实际实现流程，根据过程详解中的代码能够搭建出完全可用的网络。</p> <h2 id="准备">准备</h2> <p>在开始前，需要准备好Fabric的开发环境，具体环境搭建和软件版本可参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2021/07/21/setup_hyperledger_fabric_environment_and_test_demo/#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA"  target="_blank" rel="nofollow">基于Debian搭建Hyperledger Fabric 2.4开发环境及运行简单案例</a>。之后将<code>fabric-samples</code><sup class="footnote-ref"><a href="#fn1" id="fnref1" rel="nofollow">[1]</a></sup>下的<code>test-network</code>目录拷贝到本地，由于官方示例中过于封装导致难以单独使用，因此本文对原<code>test-network</code>项目进行修改，修改内容包括但不限于以下几个方面（建议直接将本案例仓库<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn"  target="_blank" rel="nofollow">FabricLearn</a> 下的<code>0_TestNetworkExplain</code> 目录拷贝到本地运行）：</p> <ol> <li>修改<code>compose-test-net.yaml</code>、<code>compose-ca.yaml</code>、<code>docker/docker-compose-test-net.yaml</code>、<code>docker/docker-compose-ca.yaml</code>文件中镜像版本:</li> </ol> <pre><code class="language-bash">hyperledger/fabric-tools:latest    -&gt;  hyperledger/fabric-tools:2.4 hyperledger/fabric-peer:latest     -&gt;  fabric-peer:2.4 hyperledger/fabric-orderer:latest  -&gt;  fabric-orderer:2.4 hyperledger/fabric-ca:latest       -&gt;  fabric-ca:1.5</code></pre> <ol start="2"> <li>将<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2021/07/21/setup_hyperledger_fabric_environment_and_test_demo/#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA"  target="_blank" rel="nofollow">基于Debian搭建Hyperledger Fabric 2.4开发环境及运行简单案例</a>中的<code>/usr/local/fabric/config</code>目录复制到<code>test-network</code>根目录下。如无特殊说明，环境变量<code>FABRIC_CFG_PATH</code>总是默认指向<code>test-network/config</code>目录。</li> <li>修改<code>docker-compose-test-net.yaml</code>，将<code>${DOCKER_SOCK}</code>改成<code>/var/run/docker.sock</code>。</li> <li>修改<code>createChannel.sh</code>、<code>deployCC.sh</code>，将<code>FABRIC_CFG_PATH=$PWD/../config/</code>改成<code>FABRIC_CFG_PATH=$PWD/config/</code></li> <li>如无特殊说明，本文所有命令皆运行在<code>test-network</code>根目录下。</li> </ol> <h2 id="启动默认网络">启动默认网络</h2> <h3 id="官方调用">官方调用</h3> <p>在<code>test-network</code>中，包含一个默认最简网络，该网络只包含两个<code>peer</code>节点、一个<code>orderer</code>节点和一个<code>cli</code>节点，其中各节点的证书使用<code>cryptogen</code>工具静态生成。可以直接运行以下命令启动默认最简网络：</p> <pre><code class="language-bash">./network.sh up</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ae477903b08e8ffb6000b1cca018ee12.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></p> <h3 id="过程详解">过程详解</h3> <ol> <li>检查依赖：</li> </ol> <ul> <li>检查<code>peer</code>版本</li> <li>检查<code>./config</code>配置目录是否存在</li> <li>检查<code>peer</code>版本与<code>docker image</code>版本是否匹配</li> <li>检查<code>fabric-ca</code>环境是否正常，默认使用<code>cryptogen</code><br /><img decoding="async" src="https://cdn.jsdelivr.net/gh/wefantasy/FileCloud/img/202203301057927.png" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></li> </ul> <ol start="2"> <li>创建组织证书：</li> </ol> <pre><code class="language-bash">cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output="organizations" cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output="organizations" cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output="organizations"</code></pre> <ol start="3"> <li><code>docker-compose</code>启动所有容器：</li> </ol> <pre><code class="language-bash">docker-compose -f compose/compose-test-net.yaml -f compose/docker/docker-compose-test-net.yaml up -d</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f61f79d6877d57b3dc12ca823b42822b.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"><br /> 其中<code>compose-test-net.yaml</code>包含基本镜像配置，<code>docker-compose-test-net.yaml</code>包含基础通用变量，二者缺一不可。以上命令完成后即可实现与<code>./network.sh up</code>完全相同的效果，进行下节实验前可使用<code>./network.sh down</code>关闭此网络。</p> <h2 id="启动ca网络">启动CA网络</h2> <h3 id="官方调用-1">官方调用</h3> <p>在test-network中，可以通过fabric-ca启动网络，该网络使用fabric-ca管理所有节点的身份证书，其中包含三个ca节点、两个peer节点、一个orderer节点和一个cli节点。可以直接运行以下命令启动CA网络（<strong>后面所有实验基于此网络</strong>）：</p> <pre><code class="language-bash">./network.sh up -ca</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/15fefc20bfe958534c5bfcc8ac12d5eb.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></p> <h3 id="过程详解-1">过程详解</h3> <ol> <li>检查软件、版本依赖：<br /><img decoding="async" src="https://cdn.jsdelivr.net/gh/wefantasy/FileCloud/img/202203301057927.png" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></li> <li>启动fabric-ca容器：</li> </ol> <pre><code class="language-bash">docker-compose -f compose/compose-ca.yaml -f compose/docker/docker-compose-ca.yaml up -d</code></pre> <ol start="3"> <li>创建org1证书目录：</li> </ol> <pre><code class="language-bash"># 创建组织证书根目录 mkdir -p organizations/peerOrganizations/org1.example.com/</code></pre> <ol start="4"> <li><code>enroll</code>管理员账户：</li> </ol> <pre><code class="language-bash"># enroll组织默认管理员账户，其配置对应在compose/compose-ca.yaml的command中，enroll过程会获取该账户的全部证书并保存至FABRIC_CA_CLIENT_HOME目录下 export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org1.example.com/ fabric-ca-client enroll -u https://admin:adminpw@localhost:7054 --caname ca-org1 --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem"</code></pre> <ol start="5"> <li>创建org1组织的<code>OU</code>配置文件：</li> </ol> <pre><code class="language-bash"># 创建组织msp的OU配置文件 echo 'NodeOUs:   Enable: true   ClientOUIdentifier:     Certificate: cacerts/localhost-7054-ca-org1.pem     OrganizationalUnitIdentifier: client   PeerOUIdentifier:     Certificate: cacerts/localhost-7054-ca-org1.pem     OrganizationalUnitIdentifier: peer   AdminOUIdentifier:     Certificate: cacerts/localhost-7054-ca-org1.pem     OrganizationalUnitIdentifier: admin   OrdererOUIdentifier:     Certificate: cacerts/localhost-7054-ca-org1.pem     OrganizationalUnitIdentifier: orderer' &gt; "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml"</code></pre> <ol start="6"> <li>构造<code>tlscacerts</code>证书目录（用于不同组织通信）：</li> </ol> <pre><code class="language-bash"># 由于该CA同时充当组织CA和tlsca，因此直接将CA启动时生成的组织根证书复制到组织级CA和TLS CA目录中 mkdir -p "${PWD}/organizations/peerOrganizations/org1.example.com/msp/tlscacerts" cp "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" "${PWD}/organizations/peerOrganizations/org1.example.com/msp/tlscacerts/ca.crt"</code></pre> <ol start="7"> <li>构造<code>tlsca</code>证书目录（用于组织内客户端通信）：</li> </ol> <pre><code class="language-bash">mkdir -p "${PWD}/organizations/peerOrganizations/org1.example.com/tlsca" cp "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" "${PWD}/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"</code></pre> <ol start="8"> <li>构造<code>ca</code>证书目录（用于组织内客户端通信）：</li> </ol> <pre><code class="language-bash">mkdir -p "${PWD}/organizations/peerOrganizations/org1.example.com/ca" cp "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" "${PWD}/organizations/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem"</code></pre> <ol start="9"> <li>为org1注册新账户：</li> </ol> <pre><code class="language-bash">fabric-ca-client register --caname ca-org1 --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" fabric-ca-client register --caname ca-org1 --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" fabric-ca-client register --caname ca-org1 --id.name org1admin --id.secret org1adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem"</code></pre> <ol start="10"> <li>构造<code>peer0</code>的身份证书目录：</li> </ol> <pre><code class="language-bash"># 构造peer0的msp证书目录，证书文件会存在-M指定的文件夹下 fabric-ca-client enroll -u https://peer0:peer0pw@localhost:7054 --caname ca-org1 -M "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp" --csr.hosts peer0.org1.example.com --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" cp "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/config.yaml" # 构造peer0的msp-tls证书目录 fabric-ca-client enroll -u https://peer0:peer0pw@localhost:7054 --caname ca-org1 -M "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls" --enrollment.profile tls --csr.hosts peer0.org1.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" # 构造peer0的tls证书目录并格式化文件名——用于启动peer docker容器 cp "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" cp "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt" cp "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key"</code></pre> <ol start="11"> <li>构造其它用户身份证书目录：</li> </ol> <pre><code class="language-bash"># 构造user1的msp证书目录，因为不用于组织间通信，所以不用配置tls fabric-ca-client enroll -u https://user1:user1pw@localhost:7054 --caname ca-org1 -M "${PWD}/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" cp "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/config.yaml"  # 构造org1admin的msp证书目录 fabric-ca-client enroll -u https://org1admin:org1adminpw@localhost:7054 --caname ca-org1 -M "${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org1/ca-cert.pem" cp "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml"</code></pre> <ol start="12"> <li>构造org2的组织证书，关键代码如下（各代码含义如上）：</li> </ol> <pre><code class="language-bash">mkdir -p organizations/peerOrganizations/org2.example.com/ export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org2.example.com/  fabric-ca-client enroll -u https://admin:adminpw@localhost:8054 --caname ca-org2 --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"  echo 'NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/localhost-8054-ca-org2.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/localhost-8054-ca-org2.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/localhost-8054-ca-org2.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/localhost-8054-ca-org2.pem OrganizationalUnitIdentifier: orderer' &gt; "${PWD}/organizations/peerOrganizations/org2.example.com/msp/config.yaml"  mkdir -p "${PWD}/organizations/peerOrganizations/org2.example.com/msp/tlscacerts" cp "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" "${PWD}/organizations/peerOrganizations/org2.example.com/msp/tlscacerts/ca.crt" mkdir -p "${PWD}/organizations/peerOrganizations/org2.example.com/tlsca" cp "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" "${PWD}/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem" mkdir -p "${PWD}/organizations/peerOrganizations/org2.example.com/ca" cp "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" "${PWD}/organizations/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem"  fabric-ca-client register --caname ca-org2 --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" fabric-ca-client register --caname ca-org2 --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" fabric-ca-client register --caname ca-org2 --id.name org2admin --id.secret org2adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:8054 --caname ca-org2 -M "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp" --csr.hosts peer0.org2.example.com --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" cp "${PWD}/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/config.yaml" fabric-ca-client enroll -u https://peer0:peer0pw@localhost:8054 --caname ca-org2 -M "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls" --enrollment.profile tls --csr.hosts peer0.org2.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem"  cp "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" cp "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt" cp "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key"  fabric-ca-client enroll -u https://user1:user1pw@localhost:8054 --caname ca-org2 -M "${PWD}/organizations/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" cp "${PWD}/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp/config.yaml"  fabric-ca-client enroll -u https://org2admin:org2adminpw@localhost:8054 --caname ca-org2 -M "${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org2/ca-cert.pem" cp "${PWD}/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/config.yaml"</code></pre> <ol start="13"> <li>构造orderer的组织证书，关键代码如下：</li> </ol> <pre><code class="language-bash">mkdir -p organizations/ordererOrganizations/example.com export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations/example.com  fabric-ca-client enroll -u https://admin:adminpw@localhost:9054 --caname ca-orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"  echo 'NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/localhost-9054-ca-orderer.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/localhost-9054-ca-orderer.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/localhost-9054-ca-orderer.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/localhost-9054-ca-orderer.pem OrganizationalUnitIdentifier: orderer' &gt; "${PWD}/organizations/ordererOrganizations/example.com/msp/config.yaml"  mkdir -p "${PWD}/organizations/ordererOrganizations/example.com/msp/tlscacerts" cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem" mkdir -p "${PWD}/organizations/ordererOrganizations/example.com/tlsca" cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem"  fabric-ca-client register --caname ca-orderer --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" fabric-ca-client register --caname ca-orderer --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" fabric-ca-client enroll -u https://orderer:ordererpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp" --csr.hosts orderer.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"  cp "${PWD}/organizations/ordererOrganizations/example.com/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/config.yaml"  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls" --enrollment.profile tls --csr.hosts orderer.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"  cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt" cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/signcerts/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt" cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/keystore/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key" mkdir -p "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts" cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/example.com/users/Admin@example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" cp "${PWD}/organizations/ordererOrganizations/example.com/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/example.com/users/Admin@example.com/msp/config.yaml"</code></pre> <ol start="14"> <li>启动所有容器</li> </ol> <pre><code class="language-bash">docker-compose -f compose/compose-test-net.yaml -f compose/docker/docker-compose-test-net.yaml up -d</code></pre> <p>以上命令成功后便可使用<code>docker ps</code>命令看到运行的镜像：</p> <pre><code class="language-bash">CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS                                                                    NAMES 75e842d165ea   hyperledger/fabric-tools:2.4     "/bin/bash"              10 seconds ago   Up 8 seconds                                                                             cli 576b578063c5   hyperledger/fabric-peer:2.4      "peer node start"        16 seconds ago   Up 10 seconds   0.0.0.0:9051-&gt;9051/tcp, 7051/tcp, 0.0.0.0:9445-&gt;9445/tcp                 peer0.org2.example.com 512d7d98c8c4   hyperledger/fabric-orderer:2.4   "orderer"                16 seconds ago   Up 14 seconds   0.0.0.0:7050-&gt;7050/tcp, 0.0.0.0:7053-&gt;7053/tcp, 0.0.0.0:9443-&gt;9443/tcp   orderer.example.com 276f463cc6a7   hyperledger/fabric-peer:2.4      "peer node start"        16 seconds ago   Up 12 seconds   0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:9444-&gt;9444/tcp                           peer0.org1.example.com 8faaaaa7e17a   hyperledger/fabric-ca:1.5        "sh -c 'fabric-ca-se…"   21 seconds ago   Up 20 seconds   0.0.0.0:9054-&gt;9054/tcp, 7054/tcp, 0.0.0.0:19054-&gt;19054/tcp               ca_orderer c253d9b790be   hyperledger/fabric-ca:1.5        "sh -c 'fabric-ca-se…"   21 seconds ago   Up 20 seconds   0.0.0.0:7054-&gt;7054/tcp, 0.0.0.0:17054-&gt;17054/tcp                         ca_org1 0aa90a2686a8   hyperledger/fabric-ca:1.5        "sh -c 'fabric-ca-se…"   21 seconds ago   Up 20 seconds   0.0.0.0:8054-&gt;8054/tcp, 7054/tcp, 0.0.0.0:18054-&gt;18054/tcp               ca_org2</code></pre> <h2 id="创建通道">创建通道</h2> <h3 id="官方调用-2">官方调用</h3> <p>本小节基于上一节 启动CA网络，<strong>在上节CA网络启动成功后</strong>，可以直接运行以下命令创建通道：</p> <pre><code class="language-bash">./network.sh createChannel -c mychannel</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/753e28ee8861a763fd2d1ceb7c827563.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></p> <blockquote> <p>创建通道的前提是创建该通道的创世区块，在上节步骤中，我们通过无通道、无创世区块的方式启动了整个网络，所在本节创建通道包含创建创世区块的过程。</p> </blockquote> <h3 id="过程详解-2">过程详解</h3> <ol> <li>检查依赖，并启动网络（同上）。</li> <li>设置环境变量，用于操作区块链网络</li> </ol> <pre><code class="language-bash">export CORE_PEER_TLS_ENABLED=true export CHANNEL_NAME=mychannel export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem export PEER0_ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem export PEER0_ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem export PEER0_ORG3_CA=${PWD}/organizations/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem export ORDERER_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt export ORDERER_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key</code></pre> <ol start="3"> <li>创建通道创世区块：</li> </ol> <pre><code class="language-bash"># 创建通道数据目录 mkdir channel-artifacts # 配置创世区块环境变量 export FABRIC_CFG_PATH=${PWD}/configtx configtxgen -profile TwoOrgsApplicationGenesis -outputBlock ./channel-artifacts/${CHANNEL_NAME}.block -channelID ${CHANNEL_NAME}</code></pre> <ol start="4"> <li>创建通道：</li> </ol> <pre><code class="language-bash"># 配置通道环境变量 export FABRIC_CFG_PATH=./config osnadmin channel join --channelID ${CHANNEL_NAME} --config-block ./channel-artifacts/${CHANNEL_NAME}.block -o localhost:7053 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY"</code></pre> <ol start="5"> <li>使peer节点加入通道：</li> </ol> <pre><code class="language-bash"># 将org1的peer加入通道 export CORE_PEER_LOCALMSPID="Org1MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp export CORE_PEER_ADDRESS=localhost:7051 peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block # 将org2的peer加入通道 export CORE_PEER_LOCALMSPID="Org2MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG2_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp export CORE_PEER_ADDRESS=localhost:9051 peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block</code></pre> <p>组织新加入通道后，后面为组织设置锚节点（非必须）。<br /> 6.  为通道获取通道最新配置块(以下流程为org1环境)：</p> <pre><code class="language-bash">export CORE_PEER_LOCALMSPID="Org1MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp export CORE_PEER_ADDRESS=localhost:7051 peer channel fetch config config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c ${CHANNEL_NAME} --tls --cafile "$ORDERER_CA"</code></pre> <ol start="7"> <li>将配置块解码为JSON并输出为<code>${CORE_PEER_LOCALMSPID}config.json</code>：</li> </ol> <pre><code class="language-bash">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json jq .data.data[0].payload.data.config config_block.json &gt;"${CORE_PEER_LOCALMSPID}config.json"</code></pre> <ol start="8"> <li>追加锚节点配置：</li> </ol> <pre><code class="language-bash">jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": [{"host": "'$HOST'","port": '$PORT'}]},"version": "0"}}' ${CORE_PEER_LOCALMSPID}config.json &gt; ${CORE_PEER_LOCALMSPID}modified_config.json</code></pre> <ol start="9"> <li>根据链上配置<code>${CORE_PEER_LOCALMSPID}config.json</code>和追加配置<code>${CORE_PEER_LOCALMSPID}modified_config.json</code>计算更新的配置，并将其作为一个新交易写入<code>${CORE_PEER_LOCALMSPID}anchors.tx</code>：</li> </ol> <pre><code class="language-bash">configtxlator proto_encode --input ${CORE_PEER_LOCALMSPID}config.json --type common.Config --output original_config.pb configtxlator proto_encode --input ${CORE_PEER_LOCALMSPID}modified_config.json --type common.Config --output modified_config.pb configtxlator compute_update --channel_id "${CHANNEL_NAME}" --original original_config.pb --updated modified_config.pb --output config_update.pb configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . &gt;config_update_in_envelope.json configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output "${CORE_PEER_LOCALMSPID}anchors.tx"</code></pre> <ol start="10"> <li>更新锚节点：</li> </ol> <pre><code class="language-bash">peer channel update -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME -f ${CORE_PEER_LOCALMSPID}anchors.tx --tls --cafile "$ORDERER_CA"</code></pre> <ol start="11"> <li>org2重复以上流程即创建成功：</li> </ol> <pre><code class="language-bash">echo "update org2 anchor===========" export CORE_PEER_LOCALMSPID="Org2MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG2_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp export CORE_PEER_ADDRESS=localhost:9051 peer channel fetch config config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c ${CHANNEL_NAME} --tls --cafile "$ORDERER_CA" sleep 3  configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json jq .data.data[0].payload.data.config config_block.json &gt;"${CORE_PEER_LOCALMSPID}config.json"  jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": [{"host": "localhost","port": 9051}]},"version": "0"}}' ${CORE_PEER_LOCALMSPID}config.json &gt; ${CORE_PEER_LOCALMSPID}modified_config.json  configtxlator proto_encode --input ${CORE_PEER_LOCALMSPID}config.json --type common.Config --output original_config.pb configtxlator proto_encode --input ${CORE_PEER_LOCALMSPID}modified_config.json --type common.Config --output original_config.pb configtxlator compute_update --channel_id "${CHANNEL_NAME}" --original original_config.pb --updated modified_config.pb --output config_update.pb configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . &gt;config_update_in_envelope.json configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output "${CORE_PEER_LOCALMSPID}anchors.tx"  peer channel update -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME -f ${CORE_PEER_LOCALMSPID}anchors.tx --tls --cafile "$ORDERER_CA" sleep 3</code></pre> <h2 id="部署链码">部署链码</h2> <h3 id="官方调用-3">官方调用</h3> <p>本小节基于上一节 创建通道，<strong>在上节通道创建成功后</strong>，可以直接运行以下命令部署链码：</p> <pre><code class="language-bash">./network.sh deployCC -ccn mychaincode -ccp ./asset-transfer-basic-go -ccv 1.0 -ccl go</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/9df5c622bea0802404dd430c94b06598.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></p> <h3 id="过程详解-3">过程详解</h3> <ol> <li>检查参数是否正常：<br /><img decoding="async" src="https://cdn.jsdelivr.net/gh/wefantasy/FileCloud/img/202203301046994.png" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></li> <li>下载asset-transfer-basic-go的包依赖：</li> </ol> <pre><code class="language-bash">pushd asset-transfer-basic-go            # 进入asset-transfer-basic-go目录 GO111MODULE=on go mod vendor    # 下载go包依赖 popd                            #返回当前目录</code></pre> <ol start="3"> <li>检查链码是否需要初始化、设置策略、私有数据集:<br /><img decoding="async" src="https://cdn.jsdelivr.net/gh/wefantasy/FileCloud/img/202203300949883.png" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"></li> <li>设置环境变量：</li> </ol> <pre><code class="language-bash">export FABRIC_CFG_PATH=$PWD/config/ export CORE_PEER_TLS_ENABLED=true export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem export PEER0_ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem export PEER0_ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem export PEER0_ORG3_CA=${PWD}/organizations/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem export ORDERER_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt export ORDERER_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key</code></pre> <ol start="5"> <li>打包链码：</li> </ol> <pre><code class="language-bash">peer lifecycle chaincode package mychaincode.tar.gz --path ./asset-transfer-basic-go --lang golang --label mychaincode_1.0</code></pre> <ol start="6"> <li>安装链码：</li> </ol> <pre><code class="language-bash"># ORG1安装链码 export CORE_PEER_LOCALMSPID="Org1MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp export CORE_PEER_ADDRESS=localhost:7051 peer lifecycle chaincode install mychaincode.tar.gz # ORG2安装链码 export CORE_PEER_LOCALMSPID="Org2MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG2_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp export CORE_PEER_ADDRESS=localhost:9051 peer lifecycle chaincode install mychaincode.tar.gz</code></pre> <p>安装链码后会返回一个链码 ID 需要记下：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3b96cd12a4f6809fe731f4dd3f881ae8.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"><br /> 7. 将链码 ID 设为环境变量：</p> <pre><code class="language-bash">export PACKAGE_ID=mychaincode_1.0:39889cf0623cce2500261b22914a7aa9037a897bc7f6c5b36df7a922f29b05e0</code></pre> <ol start="8"> <li>ORG1查询已安装链码并批准链码：</li> </ol> <pre><code class="language-bash">export CORE_PEER_LOCALMSPID="Org1MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp export CORE_PEER_ADDRESS=localhost:7051 # 查询已安装链码 peer lifecycle chaincode queryinstalled # 批准链码 peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "$ORDERER_CA" --channelID mychannel --name mychaincode --version 1.0 --package-id ${PACKAGE_ID} --sequence 1</code></pre> <ol start="8"> <li>ORG2查询已安装链码并批准链码：</li> </ol> <pre><code class="language-bash">export CORE_PEER_LOCALMSPID="Org2MSP" export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG2_CA export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp export CORE_PEER_ADDRESS=localhost:9051 # 查询已安装链码 peer lifecycle chaincode queryinstalled # 批准链码 peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "$ORDERER_CA" --channelID mychannel --name mychaincode --version 1.0 --package-id ${PACKAGE_ID} --sequence 1</code></pre> <ol start="10"> <li>检查链码是否已准备好被提交：</li> </ol> <pre><code class="language-bash">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name mychaincode --version 1.0 --sequence 1 --output json</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fc110ed4d8c4be918546cd3fe07d48f8.jpg" alt="Hyperledger Fabric的test-network启动过程Bash源码详解"><br /> 11. 提交链码：</p> <pre><code class="language-bash">peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "$ORDERER_CA"  --channelID mychannel --name mychaincode --version 1.0 --sequence 1 --peerAddresses localhost:7051 --tlsRootCertFiles $PEER0_ORG1_CA --peerAddresses localhost:9051 --tlsRootCertFiles $PEER0_ORG2_CA</code></pre> <ol start="12"> <li>查询提交的链码：</li> </ol> <pre><code class="language-bash">peer lifecycle chaincode querycommitted --channelID mychannel --name mychaincode</code></pre> <ol start="13"> <li>调用链码：</li> </ol> <pre><code class="language-bash">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "$ORDERER_CA" -C mychannel -n mychaincode --peerAddresses</code></pre> <h2 id="总结">总结</h2> <p>本文先是说明了<code>fabric-samples</code>过度的封装不利于我们了解掌握其中各个操作的真实过程，然后单独拿出<code>test-network</code>进行修改定制，最后详细分析了<code>test-network</code>中启动默认网络、启动CA网络、创建通道、部署链码的详细过程，并且给出了每个过程的代码，使我们能够根据代码一步步搭建所述网络，进一步理解Fabric架构。</p> <p>相关实验源码已上传：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn"  target="_blank" rel="nofollow">https://github.com/wefantasy/FabricLearn</a></p> <h2 id="参考">参考</h2> <hr class="footnotes-sep"/> <section class="footnotes"> <ol class="footnotes-list"> <li id="fn1" class="footnote-item"> <p>hyperledger.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/hyperledger/fabric-samples"  target="_blank" rel="nofollow">fabric-samples</a>. Github.<a href="#fnref1" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> </ol> </section> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-54787.htm">公务员国考报名官网报名入口（公务员国考报名官网报名入口在哪）</a></p>
                                        <p>下一个：<a href="/news/article-55323.htm">动物疫苗种类及类型图片及价格表（动物疫苗种类及类型图片及价格表大全）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-28053.htm" title="兽用疫苗可以放家用冰箱里吗安全吗视频（兽用疫苗常温下能放多久）">兽用疫苗可以放家用冰箱里吗安全吗视频（兽用疫苗常温下能放多久）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-4-free-ssr-subscribe.htm" title="「1月4日」最高速度19.8M/S，2025年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅地址分享">「1月4日」最高速度19.8M/S，2025年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-36066.htm" title="开宠物店利润大吗知乎文章推荐（开宠物店利润高吗）">开宠物店利润大吗知乎文章推荐（开宠物店利润高吗）</a></li>
                        <li class="py-2"><a href="/news/article-46017.htm" title="mysql datetime详解_Mysql 之Date,DateTime,TimeStamp三种种类的详解">mysql datetime详解_Mysql 之Date,DateTime,TimeStamp三种种类的详解</a></li>
                        <li class="py-2"><a href="/news/article-46491.htm" title="打过疫苗的猫抓伤了需要打疫苗吗（打过疫苗的猫抓伤了要打狂犬疫苗吗）">打过疫苗的猫抓伤了需要打疫苗吗（打过疫苗的猫抓伤了要打狂犬疫苗吗）</a></li>
                        <li class="py-2"><a href="/news/article-32322.htm" title="宠物医院美团好评回复优美语句 宠物医院美团好评回复优美语句怎么写">宠物医院美团好评回复优美语句 宠物医院美团好评回复优美语句怎么写</a></li>
                        <li class="py-2"><a href="/news/article-39068.htm" title="mysql 中count函数的使用方法_MySQL中count函数使用方法详解">mysql 中count函数的使用方法_MySQL中count函数使用方法详解</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-10-free-ssr-node.htm" title="「2月10日」最高速度19.7M/S，2025年Clash/SSR/Shadowrocket/V2ray每天更新免费节点订阅地址分享">「2月10日」最高速度19.7M/S，2025年Clash/SSR/Shadowrocket/V2ray每天更新免费节点订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-53155.htm" title="动物打完疫苗多久可以测抗体呢 动物打完疫苗多久可以测抗体呢">动物打完疫苗多久可以测抗体呢 动物打完疫苗多久可以测抗体呢</a></li>
                        <li class="py-2"><a href="/news/article-23872.htm" title="哈尔滨农业大学动物医院怎么样知乎（哈尔滨农业大学动物医院电话）">哈尔滨农业大学动物医院怎么样知乎（哈尔滨农业大学动物医院电话）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                StashNode免费订阅官网 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/stashnode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/stashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/stashnode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/stashnode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/stashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>